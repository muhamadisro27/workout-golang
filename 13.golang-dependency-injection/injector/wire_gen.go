// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	"github.com/go-playground/validator/v10"
	"github.com/google/wire"
	"golang-restful-api/app/database"
	"golang-restful-api/controller"
	"golang-restful-api/middleware"
	"golang-restful-api/repository"
	"golang-restful-api/router"
	"golang-restful-api/service"
	"net/http"
)

// Injectors from injector.go:

func InitializedServer() *http.Server {
	categoryRepositoryImpl := repository.NewCategoryRepository()
	db := database.GetConnection()
	v := ProvideValidatorOptions()
	validate := ProvideValidator(v)
	categoryServiceImpl := service.NewCategoryService(categoryRepositoryImpl, db, validate)
	categoryControllerImpl := controller.NewCategoryController(categoryServiceImpl)
	httprouterRouter := router.NewRouter(categoryControllerImpl)
	authMiddleware := middleware.NewAuthMiddleware(httprouterRouter)
	server := NewServer(authMiddleware)
	return server
}

// injector.go:

// ProvideValidatorOptions returns the default options for the validator.
func ProvideValidatorOptions() []validator.Option {

	return []validator.Option{}
}

// ProvideValidator returns a new validator.Validate instance.
func ProvideValidator(opts []validator.Option) *validator.Validate {
	return validator.New(opts...)
}

func NewServer(middleware2 *middleware.AuthMiddleware) *http.Server {
	return &http.Server{
		Addr:    "localhost:4000",
		Handler: middleware2,
	}
}

var categorySet = wire.NewSet(repository.NewCategoryRepository, wire.Bind(new(repository.CategoryRepository), new(*repository.CategoryRepositoryImpl)), service.NewCategoryService, wire.Bind(new(service.CategoryService), new(*service.CategoryServiceImpl)), controller.NewCategoryController, wire.Bind(new(controller.CategoryController), new(*controller.CategoryControllerImpl)))
